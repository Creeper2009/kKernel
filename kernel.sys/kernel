if isArg('noWindow') then
	print('[CHAIN] Bypassing window API...')
	term.redirect(term.native()) --Credits to Geforce Fan & BombBloke for finding this tweak
end

local function newLine(cReturn)
	if not cReturn then cReturn = colors.white end
	display.setBackgroundColor(colors.black)
	write('\n')
	display.setBackgroundColor(cReturn)
end

local function print(str)
	write(str)
	newLine()
end

_G['cWrite'] = function(str, fore, bg)
	if not fore then fore = colors.white end
	if not bg then bg = colors.black end	
	display.setTextColor(fore)
	display.setBackgroundColor(bg)
	write(str)
	display.setTextColor(colors.white)
	display.setBackgroundColor(colors.black)
end

_G['cPrint'] = function(str, fore, bg)
	cWrite(str, fore, bg)
	newLine()
end

_G['sPrint'] = function(prefix, str, preColor, strColor, preBG)
	if isArg('silent') then return end
	if not preColor then preColor = colors.white end
	if not strColor then strColor = colors.white end
	if not preBG then preBG = colors.black end
	cWrite('['..prefix..']', preColor, preBG)
	cPrint(' '..str, strColor, colors.black)
end

_G['triprint'] = function(prefix, str, suffix, preColor, strColor, sufColor, preBG)
	if isArg('silent') then return end
	if not preColor then preColor = colors.white end
	if not strColor then strColor = colors.white end
	if not sufColor then sufColor = colors.white end
	if not preBG then preBG = colors.black end
	cWrite('['..prefix..']', preColor, preBG)
	cWrite(' '..str, strColor, colors.black)
	cPrint(' '..suffix, sufColor)
end

function trim(s)
 local n = s:find"%S"
 return n and s:match(".*%S", n) or ""
end

if not isArg('silent') then print('\nBegin kKernel boot') end

local bCont = false

function kernel.panic(err, cont)
	bCont = cont and not kernel.tlco
	display.setBackgroundColor(colors.white)
	display.setTextColor(colors.black)
	newLine()
	print('!KERNEL PANIC!')
	newLine()
	print('BEGIN DUMP')
	newLine()
	print('err:')
	print(trim(tostring(err)))
	newLine()
	--print('')
	print('END DUMP')
	newLine()
	newLine()
	--print('wew')
	
	local function cLine(text)
		local x, y = term.getCursorPos()
		term.setCursorPos(1, y - 1)
		display.setBackgroundColor(colors.black)
		term.clearLine()
		display.setBackgroundColor(colors.white)
		display.setTextColor(colors.black)
		write(text)-- .. '\n')
	end
	
	if bCont then
		local i = 6
		repeat
			i = i - 1
			cLine('Returning in '..i..'...\n')
			sleep(1)
		until i <= 0
		display.setBackgroundColor(colors.black)
		--write('\n')
		return true
	else
		
		print('[SYSTEM HALT]')
		os.pullEvent = os.pullEventRaw
		display.setBackgroundColor(colors.black)
		display.setTextColor(colors.white)
		term.setCursorBlink(true)
		while true do
			print('Hanging...')
			sleep(9999)
		end
		return false
	end
	return false
end

local tAPIsLoading = {}
local function loadModule( _sPath )
    local sName = fs.getName( _sPath )
    if tAPIsLoading[sName] == true then
        return false, "Module "..sName.." is already being loaded"
    end
    tAPIsLoading[sName] = true
    
    local tEnv = {}
    setmetatable( tEnv, { __index = _G } )
	local function main()
		--local status, data = 
		return loadfile(_sPath)
	end
	local status, data, data2 = pcall(main)
	local result, d
    if data then
		setfenv( data, tEnv )
		result, d = data()
		if result == false then
			return 'ignore'
		end
		--cPrint(d)
	else
        tAPIsLoading[sName] = nil
        return false, data2
    end
    
    local tAPI = {}
    for k,v in pairs( tEnv ) do
        tAPI[k] = v
    end
	if not tAPI.tModule then
        tAPIsLoading[sName] = nil
		return false, 'Invalid Module: tModule missing'
	end
    local sWorkspace = tAPI.tModule.workspace
    if sWorkspace then _G[sWorkspace] = tAPI end
    tAPIsLoading[sName] = nil
    return true, tAPI.tModule.name
end

--[[_G['module'] = function(tModule)
	kernel.modules[tModule.workspace] = tModule
end]]

function kernel.loadModule(sPath)
	sPath = '/kernel.sys/module/' .. sPath
	if fs.exists(sPath) and not fs.isDir(sPath) then
		return loadModule(sPath)
	else
		return false, nil
	end
end

xpcall(function()
	if not isArg('silent') then sPrint('KERNEL', 'Checking Integrity...', colors.gray, nil, colors.lightGray) end
	
	if not isArg('silent') then triprint('KERNEL', 'Integrity:', 'OK', colors.gray, nil, colors.lime, colors.lightGray) end

	if not isArg('silent') then sPrint('KERNEL', 'Loading Modules...', colors.gray, nil, colors.lightGray) end
	local tAPI = fs.list('/kernel.sys/module/')
	for i = 1,#tAPI do
		local result, data = kernel.loadModule(tAPI[i])
		if result then
			if not isArg('silent') then triprint('KERNEL', 'Module ' .. (data or '[!UNDEFINED!]'), 'OK', colors.gray, nil, colors.lime, colors.lightGray) end
		else
			if not isArg('force') then
				sPrint('KERNEL', 'FATAL: Could not load Module module/'..tAPI[i], colors.gray, colors.red, colors.lightGray)
				error(data or 'unavailable',0)
			else
				if not isArg('silent') then sPrint('KERNEL', 'WARN: Could not load Module module/'..tAPI[i], colors.gray, colors.yellow, colors.lightGray) end
			end
		end
	end
	
	--begin
	if isArg('clear') then
		term.setBackgroundColor(colors.black)
		term.setTextColor(colors.white)
		term.clear()
	end
	
	if isArg('boot') then
		local status, tPath = isArg('boot')
		
		local env = setmetatable({ ['sRun'] = nil }, { __index = _G })
		local run = loadstring('term.setBackgroundColor(colors.black);dofile("'..table.concat(tPath)..'")') --workaround to an issue with the background color, defaults to white
		setfenv(run, env)
		run()
		
		--shell.run(table.concat(tPath)) --old method
	end
	
	--finished up
	kernel.panic('reached end of execution', true)
end, kernel.panic)


if not bCont then
	while true do
		print('Hanging...')
		sleep(9999)
	end
end